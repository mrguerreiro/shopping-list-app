#!/usr/bin/env node
/* eslint-disable no-undef */

/**
 * Script de build do frontend
 * 
 * Valida a configura√ß√£o da API e faz o build otimizado.
 * Uso: node scripts/build.js
 * 
 * Este script usa Node.js APIs (require, __dirname, process) que n√£o s√£o
 * parte do ambiente ESM do frontend, por isso o eslint-disable no topo.
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando build do frontend...\n');

// Verifica se o arquivo .env existe
const envPath = path.join(__dirname, '..', '.env');
const envExamplePath = path.join(__dirname, '..', '.env.example');

if (!fs.existsSync(envPath)) {
  console.warn('‚ö†Ô∏è  Arquivo .env n√£o encontrado!');
  console.warn('üìù Criando .env a partir do .env.example...\n');
  
  if (fs.existsSync(envExamplePath)) {
    fs.copyFileSync(envExamplePath, envPath);
    console.log('‚úÖ Arquivo .env criado. Configure a VITE_API_URL antes de continuar.\n');
  } else {
    console.error('‚ùå Arquivo .env.example n√£o encontrado.');
    process.exit(1);
  }
}

// L√™ e valida a URL da API
const envContent = fs.readFileSync(envPath, 'utf8');
const apiUrlMatch = envContent.match(/VITE_API_URL=(.+)/);

if (apiUrlMatch && apiUrlMatch[1] && apiUrlMatch[1].trim() !== 'http://localhost:5001') {
  console.log(`‚úÖ URL da API configurada: ${apiUrlMatch[1].trim()}\n`);
} else {
  console.warn('‚ö†Ô∏è  VITE_API_URL n√£o configurada ou usando localhost.');
  console.warn('   O app vai funcionar apenas localmente.\n');
}

// Executa o build
try {
  console.log('üì¶ Executando npm run build...\n');
  execSync('npm run build', { stdio: 'inherit', cwd: path.join(__dirname, '..') });
  console.log('\n‚úÖ Build conclu√≠do com sucesso!');
  console.log('üìÅ Arquivos gerados em: frontend/dist/\n');
} catch (error) {
  console.error('\n‚ùå Erro durante o build:', error.message);
  process.exit(1);
}
